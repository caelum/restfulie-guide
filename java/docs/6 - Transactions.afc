[chapter Transactions]

[section Where is my transaction?]

Because the transaction was internally represented by a set of resources and in a transparent way, this chapter ends here.

As the previous chapter has shown, due to the addressability, stateless and hypermedia nature of a REST software, there was no need to expose a transaction interface without proper semantics to the client.

[section Other benefits]

Doing so, we have even leveraged our system, allowing further use that was not predicted during development time, but users found out that it was possible to do it: sharing trips between friends, allowing someone else to pay for your trip and even bookmarking your trip for further reference.

All of these functionalities in our travel booking server can also be implemented in systems not based on REST but the effort to implement them in such a existing software will always be higher than the effort we spent to implement them on our REST based one: because the architecture forced us a stateless system, with addressable resources and hypermedia driven design we did not write any code focusing in the above mentioned functionalities, there was no effort.

Some of these positive aspect of REST systems have been seen in many places on the web but still some architects insist on stateful, unadressable systems that lose - or make it more difficult to - the collaborative power that has risen lately.
