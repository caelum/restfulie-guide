h1. Basic resource operations

This chapter will introduce how to use the basic HTTP verbs to create, remove and retrieve a resource or its collection using Restfulie. This simple usage of the HTTP verbs has been widely adopted by the development communities in every language although with a few modifications from the HTTP specification due to some PUT restrictions.

Rails provides support for CRUD over HTTP using request parameters in order to pass information to the server. A REST architecture will use a resource representations through specific media types, therefore Restfulie will allow requests to pass through its body the resource representation or related content and deal with it.

For the client, it means that he is supposed to make more use of request bodies instead of request parameters, while the server will worry about understanding such typically well-known representations.

h2. Our hotel media-type

We start creating our hotel model with three fields describing it, its name, city and total number of rooms, using Rail's scaffold feature that also generates some basic controllers:

<pre>
script/generate scaffold hotel name:string city:string room_count:integer
rake db:create:all
rake db:migrate
</pre>

Our hotel representation can not be pure xml as it is not a hypermedia format [link to Jim's book]:

<pre>
<hotel>
	<name>Caelum Objects Hotel</name>
	<room_count>220</roomt_count>
	<city>Sao Paulo</city>
</hotel>
</pre>

We will adopt a custom media-type that provides information for our hotel's relations, supporting links: **vnd/hotel+xml**.
In order to configure Restfulie to use this media type for our Hotel, one invokes the **media_type** method, passing any number of custom media types that your model can be mapped to:

<pre>
class Hotel < ActiveRecord
	acts_as_restfulie
	media_type "vnd/hotel+xml"
end
</pre>

Once such media type has been configured, a valid representation of our hotel, showing a relation to a similar hotel by using atom's link element, which describe a relation to another resource, with its meaning described by its rel attribute.
Such attribute comes from Atom's specification and if the rel element does not follow one of the possible values described by that file, it should be prefixed with its namespace:

<pre>
<hotel>
	<name>Caelum Objects Hotel</name>
	<room_count>220</roomt_count>
	<city>Sao Paulo</city>
	<link rel="http://caelumobjects.com/hotels/similar" href="http://localhost:3000/hotels/2" />
</hotel>
</pre>

In such case, our hotel resource has a similar one that can be retrieved by sending a GET request to <b>http://localhost:3000/hotels/2</b>.

h2. Creating hotels

Once the client defined the mime-type and the server configured which classes represents each media types, we can focus on acting with our resources.

There are two HTTP verbs that allows us to create resources on the server side. In order to create hotels we will use the most widely used solution: sending a **post** request to /hotels.

First we need to receive the **post** data (the resource representation) and transform it into our domain data. 

If the result was a success, the **post** method should return the resource location and a **201 Created** response, allowing the client to retrieve the resource data if required.

<pre>
location = url_for resource
render_resource resource, options, {:status => :created, :location => location}
</pre>

This code will generate a response 201 with the resource location in the **Location** header.

The controller still needs to check if the process was successfully completed or not and, if something goes wrong, render the related error messages.

<blockquote>TODO check unprocessable entity is a valid response? and its body?</blockquote>

<pre>
class HotelsController < ApplicationController::Base
	def create
	    @hotel = Restfulie.from request
	    if @hotel.save
	      render_created @city
	    else
	      render :xml => @city.errors, :status => :unprocessable_entity
	    end
	end
end
</pre>

<blockquote>TODO image with both paths: everything ok, something wrong, show representation on image</blockquote>

If the server wants to avoid one extra request-response trip, it can return the resource content with the XXX return code and the client will not need another request to retrieve this information.

Note that render_created will already do it for us, returning a response as:

<blockquote>
There is one major validation step missing in the code above: the object created invoking *Restfulie.from* might not be a hotel and we are not checking its content-type. In order to check if the media-type sent matches the expected one:

<pre>
valid = Restfulie::MediaType.supports?(request.headers['CONTENT_TYPE']) &&
       	Restfulie::MediaType.media_type(request.headers['CONTENT_TYPE']) == Hotel
</pre>
</blockquote>

h2. Default behaviour

The typical behaviour for CRUD systems following REST is to create resources through **post** by translating the resource to domain models, saving them to the database and responding with a 201.

When using Restfulie, those common cases are supported by default if your controller includes the **RestController** module, which includes the behaviour displayed so far:

<pre>
class HotelsController < ApplicationController
  include Restfulie::Server::RestController

	# implicit declarated the create method
	# including media-type checking

end
</pre>

<blockquote>TODO describe client, move client code up?</blockquote>

<pre>
hotel = {:name => "Caelum Objects Hotel", :city => "Sao Paulo", :room_count => 3}

hotel = Restfulie.at('http://localhost:3000/hotels').as('vnd/caelum_hotel+xml').create(hotel.to_xml(:root => "hotel"))

puts "Response was #{hotel.web_response}"
</pre>

h2. Accessing headers and the response itself

Sometimes the clients want to access the http response information itself and you can do it with Restfulie through the web_response method which is the Net::HTTPResponse object itself:

<pre>
hotel = Restfulie.at('http://localhost:30000/hotels/1').get
puts "Hotel created at #{hotel.web_response['Content-type']}"
</pre>

<blockquote>
You can remove both new and create methods from your HotelsController as they are not needed.
</blockquote>










h2. Evolving the server

The previous example demonstrates how our client code can be written detached from the resource model or server side model: there was no need to create a Hotel representation on the client side end to
make things work.

What would happen if the server wants to evolve its model with new fields?

<pre>
script/generate migration add_hotel_rate
</pre>

And enter the new *rate* field

<pre>
class AddHotelRate < ActiveRecord::Migration
  def self.up
    add_column :hotels, :rate, :integer
    Hotel.all.each do |h|
      h.rate = 3
      h.save
    end
  end

  def self.down
    remove_column :hotels, :rate
  end
end
</pre>

Finally, run your database migration:

<pre>
rake db:migrate
</pre>

Clients which are unaware of that new information available in the resource still work.
Meanwhile, new or modified clients can make use of that available information:

<pre>
hotel = {:name => "Caelum Objects Hotel", :city => "Sao Paulo", :room_count => 3, :rate => 4}
hotel = Restfulie.at('http://localhost:3000/hotels').as('vnd/caelum_hotel+xml').create(hotel.to_xml(:root => "hotel"))
puts "Rated: #{hotel.rate}"
</pre>

Following such principles, the server side can evolve its model without affecting running clients, therefore REST client frameworks should be written in a way that allows servers such evolution to take place.

This behavior is called forward-compatibility and is implemented in Restfulie through the use of dynamic generated methods that allow access to the new unexpected content.

Restfulie Rails and C# client implementation supports the creation of dynamic methods due to the language nature, while Java allow users to access resources state transitions and relations through a fixed API that allows custom parameters.

REST APIs shall not deal only with HTTP headers, responses and URIs but implement content type negotiation and default serialization behavior that pushes developers towards REST systems, otherwise the developer is still open to write a "restless" system with a Rest-ready API.

h2. Mapping responses to our domain

In most cases we want to map resource access responses to our domain models, so in our case we want to create a class
which represents a Hotel in the client side:

<pre>
class Hotel < ActiveRecord::Base
	uses_restfulie
end
</pre>

And now we can read it from a specific URI:

<pre>
hotel = Hotel.from_web 'http://localhost:3000/hotels/1'
puts "Hotel #{hotel.name} retrieved"
</pre>

h2. Content type

<blockquote>
TODO
- Most of the web request [need reference] is based on data retrieval correctly using the GET verb.
- Content type negotiation: if the existing resource can be represented in that media-type, gives it
- Restfulie knows how to transform to xml and json by default
- Otherwise, complain
</blockquote>
















h2. Retrieving a list of resources

Either the entry point to an application can be a list of available resources of an specific type or at some point our client ends up retrieving a list of resources.
In our hotel book management system, the entry point will be a choice of available hotels, so in the server side, one can render the list of hotels as a resource:

<pre>
def index
  @hotels = Hotel.all
  render_resource @hotels
end
</pre>

And a request to this URI accepting xml as its return content-type will give back a list of hotels:

<pre>
GET /hotels
Accept: application/xml
</pre>

<pre>
<?xml version="1.0" encoding="UTF-8"?>
<hotels>
  <hotel>
    <city>Sao Paulo</city>
    <created-at>2009-12-13T22:44:09Z</created-at>
    <id>1</id>
    <name>Caelum Objects Hotel</name>
    <rate>4</rate>
    <room-count>3</room-count>
    <updated-at>2009-12-13T22:44:09Z</updated-at>
  </hotel>
  <hotel>
    <city>Sao Paulo</city>
    <created-at>2009-12-13T22:44:21Z</created-at>
    <id>2</id>
    <name>Some Other Hotel</name>
    <rate>4</rate>
    <room-count>3</room-count>
    <updated-at>2009-12-13T22:44:21Z</updated-at>
  </hotel>
</hotels>
</pre>

Although the *render_resource* method handled content negotiation and generated valid *application/xml* content, in order to add extra behaviour or flow control to the list of hotels we are required to create a new media type, one that encapsulates many instances of hotels.

By following this path of new a media type creation for every different type of information retrieval, the project will end up with a high number of custom media types, making them useless for other systems and losing the ability to be understood by a larger number of clients.

h2. Free caching and 304 support
















h2. The hotel list Atom feed

If we create an atom feed for our hotels, we are able to use a well-known and standard media type that other clients are already capable of understanding.

An Atom feed representing the same response mentioned earlier would be:

<pre>
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>http://localhost:3000/hotels</id>
	<title type="text">Hotels</title>
	<updated>2009-12-21T00:22:24-08:00</updated>
	<author><name>Hotels</name></author>
	<link rel="self" href="http://localhost:3000/hotels"/>
	 <entry>
    <id>http://localhost:3000/hotels/1</id>
     <title type="text">Hotel</title>
     <updated>2009-12-13T22:44:09-08:00</updated>
     <link rel="self" href="http://localhost:3000/hotels/1"/>
     <content type="vnd/caelum_hotel+xml">
       <hotel>
			<city>Sao Paulo</city>
			<created-at>2009-12-13T22:44:09Z</created-at>
			<id>1</id>
			<name>Caelum Objects Hotel</name>
			<rate>4</rate>
			<room-count>3</room-count>
			<updated-at>2009-12-13T22:44:09Z</updated-at>
		</hotel>
     </content>
   </entry>
   <entry>
     <id>http://localhost:3000/hotels/2</id>
     <title type="text">Hotel</title>
     <updated>2009-12-13T22:44:21-08:00</updated>
     <link rel="self" href="http://localhost:3000/hotels/2"/>
     <content type="vnd/caelum_hotel+xml">
			<hotel>
				<city>Sao Paulo</city>
				<created-at>2009-12-13T22:44:21Z</created-at>
				<id>2</id>
				<name>Caelum Objects Hotel</name>
				<rate>4</rate>
				<room-count>3</room-count>
				<updated-at>2009-12-13T22:44:21Z</updated-at>
			</hotel>
     </content>
   </entry>
</feed>
</pre>

And in order to generate such atom feed, we simply need to define its title:

<pre>
  def index
    @hotels = Hotel.all
    render :text => @hotels.to_atom(:title=>'Hotels', :controller => self), :content_type => 'application/atom+xml'
  end
</pre>

Again, the default inherited *index* method behaves returning an atom feed if one access the 'http://localhost:3000/hotels' URI: if there is no need for customization, there is less code to be written.

h2. Hypermedia in our resource list

Another approach to creating a list of resources is to let hypermedia drive our client application and represent the list of resources as connections that can be accessed through their own URIs.

Typical formats that allow representations with hypermedia support are application/xhtml with our own microformat:

<blockquote>TODO add links here</blockquote>

<pre>
<?xml version="1.0" encoding="UTF-8"?>
<html>
<body>
	<table class="hotels">
		<tr id="1">
			<td>Sao Paulo</td>
	    <td>2009-12-13T22:44:09Z</td>
	    <td>Caelum Objects Hotel</td>
	    <td>4</td>
	    <td>3</td>
	    <td>2009-12-13T22:44:09Z</td>
			<td>http://localhost:3000/hotels/1</td>
	  </tr>
	  <tr>
	    <td>Sao Paulo</td>
	    <td>2009-12-13T22:44:21Z</td>
	    <td>2</td>
	    <td>Some Other Hotel</td>
	    <td>4</td>
	    <td>3</td>
	    <td>2009-12-13T22:44:21Z</td>
			<td>http://localhost:3000/hotels/1</td>
	  </tr>
	</table>
</body>
</html>
</pre>

h2. Atom feed and partial resource representation

In our atom feed representation, Restfulie inserts by default the link to every resource. If you want partial rendering for each resource, it can be achieved by customizing the *to_xml* invocation:

<pre>
def index
  @hotels = Hotel.all
  render :text => @hotels.to_atom(:title=>'Hotels', :controller => self), :content_type => 'application/atom+xml' do |hotel|
		hotel.to_xml(:skip_instruction => true, :only => :name)
	end
end
</pre>

In this case, our atom feed will look like:

<pre>
	<?xml version="1.0"?>
	      <feed xmlns="http://www.w3.org/2005/Atom">
	        <id>http://localhost:3000/hotels</id>
	        <title type="text">Hotels</title>
	        <updated>2009-12-21T00:22:24-08:00</updated>
	        <author><name>Hotels</name></author>
	        <link rel="self" href="http://localhost:3000/hotels"/>
	          <entry>
	            <id>http://localhost:3000/hotels/1</id>
	            <title type="text">Hotel</title>
	            <updated>2009-12-13T22:44:09-08:00</updated>
	            <link rel="self" href="http://localhost:3000/hotels/1"/>
	            <content type="vnd/caelum_hotel+xml">
	              <hotel>
	  				<name>Caelum Objects Hotel</name>
					</hotel>
	            </content>
	          </entry>
	          <entry>
	            <id>http://localhost:3000/hotels/2</id>
	            <title type="text">Hotel</title>
	            <updated>2009-12-13T22:44:21-08:00</updated>
	            <link rel="self" href="http://localhost:3000/hotels/2"/>
	            <content type="vnd/caelum_hotel+xml">
	              <hotel>
	  					<name>Caelum Objects Hotel</name>
					</hotel>
	            </content>
	          </entry>
	</feed>
</pre>

With such representation, one can retrieve the actual resource and act with it after accessing its URI. In the client side,
the code will resemble navigating through connected resources:

<pre>
	hotels = Restfulie.at(HOTELS_ENTRY_POINT).get
	hotel = hotels[1]
	puts "name: #{hotel.name}"
	
	# retrieves the resource through GET
	hotel = hotel.self
	puts "room count: #{hotel.room_count}"
</pre>

Note that if the hotel representation itself had a link to related resource, i.e. similar hotels, you could navigate through that link:

<pre>
	<?xml version="1.0"?>
	      <feed xmlns="http://www.w3.org/2005/Atom">
	        <id>http://localhost:3000/hotels</id>
	        <title type="text">Hotels</title>
	        <updated>2009-12-21T00:22:24-08:00</updated>
	        <author><name>Hotels</name></author>
	        <link rel="self" href="http://localhost:3000/hotels"/>
	          <entry>
	            <id>http://localhost:3000/hotels/1</id>
	            <title type="text">Hotel</title>
	            <updated>2009-12-13T22:44:09-08:00</updated>
	            <link rel="self" href="http://localhost:3000/hotels/1"/>
	            <content type="vnd/caelum_hotel+xml">
	              <hotel>
	  				<name>Caelum Objects Hotel</name>
						<link rel="related" href="http://localhost:3000/hotels/2" />
					</hotel>
	            </content>
	          </entry>
	          <entry>
	            <id>http://localhost:3000/hotels/2</id>
	            <title type="text">Hotel</title>
	            <updated>2009-12-13T22:44:21-08:00</updated>
	            <link rel="self" href="http://localhost:3000/hotels/2"/>
	            <content type="vnd/caelum_hotel+xml">
	              <hotel>
	  					<name>Caelum Objects Hotel</name>
							<link rel="related" href="http://localhost:3000/hotels/1" />
					</hotel>
	            </content>
	          </entry>
	</feed>
</pre>

<pre>hotels = Restfulie.at(HOTELS_ENTRY_POINT).get
hotel = hotels[1]
puts "name: #{hotel.name}"
puts "similar hotel: #{hotel.related.name}"
</pre>

h2. Segmentation by freshness

Sometimes a resource is composed by a list of other resources as our hotel list example. Another one is an human entry point containing four sections: the top 10, my bookings, random items, and special deals.

In this case, all information come from the same source, but every part has a different probable validity if it is going to be cached. If the page is served as one big chunck of information, it will always be stale due to the random items section. "My orders" is stale only when I place a new order and, in the same way, the top 10 is only stale if any item is bought and surpasses the number of times the 10th item was bought so far.

One of the main issues with this type of pages which aggregate information from one or many sources with <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21">different expire-expectations</a> is that cached versions in proxies and clients become stale faster than it should for some elements: once one of this providing sources publishes new information or is updated, the entire representation becomes stale..

<a href="http://www.martinfowler.com/bliki/SegmentationByFreshness.html">Martin Fowler described</a> a well spread approach to allow those pages to be partially cached within local proxies and clients, thus sharing requested representations between multiple users.

Given the hotel scenario, we could create different resources:

<ul>
<li>http://caelumhotels.com/top_sellers</li>
<li>http://caelumhotels.com/myself/bookings</li>
<li>http://caelumhotels.com/random</li>
<li>http://caelumhotels.com/special</li>
</ul>

<blockquote>myself/bookings should be my username itself due to caching capabilities for intermediate layers</blockquote>

And finally an aggregating page:

<pre>
<html>
<a class="lazy_load" href="http://caelumhotels.com/top_sellers">Top sellers</a>
<a class="lazy_load" href="http://caelumhotels.com/myself/bookings">My bookings</a>
<a class="lazy_load" href="http://caelumhotels.com/random">Random items</a>
<a class="lazy_load" href="http://caelumhotels.com/special">Special items</a>

</pre>

And then, for each <b>lazy_load</b> link, we create a <b>div</b> with its content:

<pre>
<script>
$('.lazy_load').each(function(link) {
  uri = link.attr('href'); 
  div = $('<div></div>').load(uri); // cache hits!
  link.after(div);
});
</script>
</html>
</pre>

This allows our proxies to cache each component in our page apart from the page itself: whenever its content becomes stale in a proxy, only part of that page needs to be updated.

In a web were most data can be cached and does not become stale so fast, this technique should usually lessen the amount of data being transfered between client and server.

All one needs to do is <a href="http://www.mnot.net/cache_docs/">properly use the http headers for caching</a>.

<blockquote>Remember that if your client supports either parallel requests to the server and/or keep-alive connection, the results might be even better.</blockquote>

Pretty much in the same way as with the human web, a distributed system using the web as its infrastructure will <a href="http://www.mnot.net/cache_docs/">gain the same cache benefits </a>as long as they implement correct caching policies through http headers (and correct http verbs).

When your server provides a resource representation linking to a series of other related resources the client and proxies staying on the way will be allowed to cache each and every other resource on its own.

This approach results in changes applied to one resource not affecting cached representations of other resources. An stale representation will not affect those accessing other resources within the same context.

Sometimes the decision whether to change latency for scalability might depend on how you think your clients will use your resources: in the human web mentioned above, the developer knew exactly how its clients would access it.

<blockquote>Remember: there is zero latency for unexpired resources and there is small latency for retrieving cached versions of a resource from a shared proxy</blockquote>

<blockquote>TODO image shared proxy: show the advantage</blockquote>

In distributed systems using REST, guessing how resources will be used can be dangerous as it allows you to tight couple yourself to this behaviour while published resources can and would be used in unforeseen ways.

Giving information that will help most cases is fine and providing links to further resources details allow you to balance between latency and scalability - due to caching - as you wish.

h3. Dynamic contracts

This is only possible because we have <a href="http://guilhermesilveira.wordpress.com/2009/12/08/hypermedia-making-it-easier-to-create-dynamic-contracts/">signed dynamic contracts with our clients.</a> They expect us to follow some formal format definition (<a href="http://www.w3.org/TR/xhtml1/">defined in xhtml</a>) and processes. How our processes are presented within our representations is the dynamic part of the contract.

While the fixed part can be validated<a href="http://www.w3.org/XML/Schema"> with the use of schema validators</a>, the dynamic part - the process - which is guided by our server needs to be validated through testing the behaviour of our applications: asserting that hypermedia guided transitions should be reflected in our application state.

h2. Progressive enhancement

Martin notes that this is a <a href="http://en.wikipedia.org/wiki/Progressive_enhancement">kind of progressive enhancement</a>: although its definition is related to accessibility, its control over bandwidth benefits are similar to the approach mentioned ones.

h2. Domain mapping to resources

The one to one mapping between our domain model and published resource types might not be the best solution, so you can configure Restfulie how to generate a resource representation based on some specific conditions to your system: one or more domain objects that are mapped to a web resource through the arguments passed to the resource representation serialization method.

In such cases our <b>Hotel</b> type can have its <b>to_xml</b> method overriden:

<pre>
class Hotel < ActiveRecord::Base
	acts_as_restfulie
	media_type "vnd/caelum_hotel+xml", "vnd/caelum_hotel+json"
	
	def logo
		logo_url self.id
	end
	
	def to_xml(options)
		options[:methods] => :logo
		super(options)
	end
end
</pre>

h2. Hotel atom entry

<blockquote>TODO explain how to use atom to access every hotel.</blockquote>

h2. Updating hotels

There are two common options to allow resource update, you can either use the verb PUT sending the entire resource representation or PATCH to change parts of the resource [reference: PATCH verb approved proposal].

PUT requests were used sometimes with partial resource representations due to the non existence of the PATCH verb, which has only lately been approved as a standard.

A typical update behavior with full resource representation include a few steps. Once an URI represents an specific resource, the resource id can be extracted from it. Then it needs to check that the required resource exists returning a <b>404</b> in case it does not, and Rails takes care of both features for us while loading a model:

<pre>
def update
  @hotel = Hotel.find(params[:id])
end
</pre>

After that the resource might be in such a state that it can not be updated. In our hotel system, a hotel can always be updated, therefore we shall configure it to allow updates to be always executed:

<pre>class Hotel < ActiveRecord::Base
	acts_as_restfulie do |hotel, t|
	  t << [:update]
  end
	media_type "vnd/caelum_hotel+xml", "vnd/caelum_hotel+json"
end
</pre>

Now our hotel representation presents a new link to our clients, letting them know that they can update their hotels through the hotel resource URI with a PUT request. The URI is discovered by asking Rails for the <b>update</b> URI, which was configured in the <b>routes.rb</b> file when the scaffold generator was run.

<pre>
HTTP 1.1
GET http://localhost:3000/hotels/1
</pre>

Such a GET request to retrieve a hotel now returns:

<pre><hotel>
	<city>Sao Paulo</city>
	<created-at>2010-01-01T15:10:22Z</created-at>
	<id>1</id>
	<name>Caelum Objects Hotel</name>
	<rate>4</rate>
	<room-count>3</room-count>
	<updated-at>2010-01-01T15:10:22Z</updated-at>
	<atom:link rel="update" href="http://localhost:3000/hotels/1"/>
</hotel>
</pre>

Our server should check if the hotel can be updated and answer with a <b>405</b> response in case it does not. Such check is provided by Restfulie by invoking the <b>can?</b> method passing an argument, the symbol which is the transition or relation name to our resource.

After that, content negotiation takes place so the server checks whether the content sent by the client is comprehensible and makes sense to update this resource. The code to achieve this check is exactly the same as when creating a resource:

<pre>
  return head :status => 405 unless @loaded.can? :update

  return head 415 unless fits_content(Hotel, request.headers['CONTENT_TYPE'])
</pre>

Finally the server should read the data from the request body, extracting the root element. This parsed data is then stored in a hash because Rails will use this hash to update our model:

<pre>
  @model = Hash.from_xml(request.body.string)[model_name]
</pre>

h2. 

if @loaded.update_attributes(@model)
  render_resource @loaded
else
  render :xml => @loaded.errors, :status => :unprocessable_entity
end

h2. Update callback

Because the entire resource representation might override any domain objects relations hidden from the resource view, it is important to give the controller a chance to modify the loaded information from the server prior to using it to update the related objects in the database.

In order to do it, a <b>pre update</b> callback can be implemented by configuring Restfulie to invoke it prior to update:

<pre>class HotelsController < ApplicationController
  as_restfulie_controller do |config|
		config.update.invoke_before(:pre_update)
	end

	# other controller's content here
end
</pre>

Our system does not need to execute any parsing on the hash prior to updating the loaded object, but it could, for example, increase the number of updates executed with it:

<pre>def pre_update(hash, hotel)
	hotel.update_count++
end
</pre>

h2. Other callbacks

Restfulie provides callbacks for every possible operation with resources.

h2. Full resource update

<blockquote>TODO explain in a later chapter</blockquote>

h2. Removing hotels

In order to remove hotels from the database, we need to write a <b>destroy</b> method that loads the required domain object and removes it. If it does not exist, the server should answer with a <b>404</b> response and to achieve it we can simply implement the method invoking the find and destroy methods:

<pre>
def destroy
  @hotel = Hotel.find(params[:id])
  @hotel.destroy
  head :ok
end
</pre>

Because Rails already answer with a <b>404 not found</b> response if the model is not not found, we do not need a conditional check.

Once again, RestfulieController default <b>destroy</b> behaviour is to locate the resource and remove it from the database, answering with a <b>404 not found</b> if it is not found. Once our controller includes RestfulieController's behaviour, there is no need to write the <b>destroy</b> method again, only if we want to customize it:

<pre>
class HotelsController < ApplicationController
  include Restfulie::Server::RestController

	# implicit declared the destroy method

end
</pre>

The client will not access the <b>destroy</b> process as an entry point: it will first need to access the resource in order to find out whether it can be removed or not from the server and this will be achieved now, through the use of hypermedia as a guiding feature to our processes and transitions.

h2. Hypermedia guided resource removal

But how do we know that in order to remove that resource, I need to <strong>DELETE</strong> that specific URI?

<pre>
hotels = Hotel.at('http://localhost:3000/hotels').get
hotel = hotels[0]
</pre>

In other words, I want to delete the first hotel found, where should I send a <strong>DELETE</strong> request to?

The hotel representation can include a <strong>self</strong> link, which gives the client an URI which identifies the resource itself. By sending a <strong>DELETE</strong> request to this URI, the resource should be deleted.

An atom entry already contains a <strong>self</strong> link and therefore Restfulie can use it to delete the resource from the server:

<pre>
<entry>
	<id>http://localhost:3000/hotels/1</id>
	<title type="text">Hotel</title>
	<updated>2009-12-13T22:44:09-08:00</updated>
	<link rel="self" href="http://localhost:3000/hotels/1"/>
	<content type="vnd/caelum_hotel+xml">
		<hotel>
			<name>Caelum Objects Hotel</name>
		</hotel>
	</content>
</entry>
</pre>

<pre>
hotels = Hotel.at('http://localhost:3000/hotels').get
hotel = hotels[0]
hotel.destroy
</pre>

Because the hotels entry point gave us an hotel feed, Restfulie knowns that the first entry's URI is http://localhost:3000/hotels/1 and will send a DELETE request	upon the <strong>destroy</strong> method invocation.

h2. Removing non-atom entry representations

<blockquote>TODO explain this section</blockquote>

h2. Learning more about our resources

<blockquote>TODO the verb OPTIONS</blockquote>

h2. Flight routes

Flight routes will be statically created in our system and include an origin, destination, local time of departure and arrival. In order to model a simpler system, we will assume all flights are available every day. Using Rails scaffold we create the Flight class:

<pre>
script/generate scaffold Flight from:string to:string departure:time arrival_after:integer
rake db:migrate
</pre>

And insert a few flights through a custom migration:

<pre>
script/generate migration insert_basic_flight_routes
</pre>

<pre>
class InsertBasicFlightRoutes < ActiveRecord::Migration

	def new_flight(from, to, departure, arrival)
  	Flight.new(:from => from, :to => to, :departure => departure, :arrival_after => arrival).save
	end
	
  def self.up
    new_fligth("Sao Paulo", "Miami", Time.parse("08:55"), (12.hours + 50.minutes))
    new_fligth("Sao Paulo", "Miami", Time.parse("09:25"), (11.hours + 50.minutes))
    new_fligth("Sao Paulo", "Miami", Time.parse("13:45"), (12.hours + 50.minutes))
    new_fligth("Sao Paulo", "Miami", Time.parse("16:50"), (13.hours + 50.minutes))
    new_fligth("Miami", "Los Angeles", Time.parse("15:45"), (8.hours + 15.minutes))
    new_fligth("Miami", "Los Angeles", Time.parse("17:50"), (7.hours + 50.minutes))
  end

  def self.down
    Flight.destroy_all
  end
end
</pre>

<blockquote>Note: online travel agencies will usually locate airports near your city prior to executing your search.</blockquote>

We will also add new hotels in Miami and Los Angeles to our travel system:

<pre>
	script/generate migration insert_extra_hotels
</pre>

<pre>
	class InsertExtraHotels < ActiveRecord::Migration
	  def self.up
	    Hotel.new({:name => "Miami Objects", :city => "Miami", :room_count => 8, :rate => 4}).save
	    Hotel.new({:name => "Resting in Miami", :city => "Miami", :room_count => 10, :rate => 3}).save
	    Hotel.new({:name => "Restfulie in LA", :city => "Los Angeles", :room_count => 2, :rate => 5}).save
	    Hotel.new({:name => "Los Angeles Objects", :city => "Los Angeles", :room_count => 16, :rate => 3}).save
	  end

	  def self.down
	  end
	end
</pre>

And execute everything:

<pre>
	rake db:migrate
</pre>