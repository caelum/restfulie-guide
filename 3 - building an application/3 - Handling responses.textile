h1. Handling responses

One of the key aspects of the HTTP protocol is a response code. Clients should typically check a response code prior to deciding its next step related to the resource at hand. The importance of these response codes for clients has been widely accepted and adopted so most client APIs, as RestEasy [reference], Spring [reference] and Jersey's [reference] API, also implement it. This chapter will cover how to handle response codes in the client side using Restfulie.

Another important aspect is to easy access responses headers: in a REST based application, content type negotiation, redirection and other important meta data is handled through headers.

Restfulie makes it easier to handle response codes and headers due to its default behavior when handling typical responses, that have well expected results.

h2. Independent behavior

Restfulie will automatically de-serialize the result's body, no matter which response code it receives. Assuming a <b>200 OK</b> response was returned, the following code will print the hotel name.

<pre>
	hotel = Restfulie.at('http://localhost:30000/hotels/1').get
	puts "Hotel #{hotel.name}"
</pre>

<blockquote><b>HEAD</b> requests do not provide any response body.</blockquote>

h2. 200 OK

The most typical result a web request can get is a <strong>200 OK</strong>, meaning that the request was successfully processed, according to the HTTP 1.1 specification [reference].

A <b>GET</b>, <b>POST</b> and <b>DELETE</b> request does not add any specific behavior when receiving a <b>200 OK</b> response.
<pre>
GET an entity corresponding to the requested resource is sent in the response;
HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body;
POST an entity describing or containing the result of the action;
</pre>

And according to the <strong>PATCH</strong> verb definition [http://tools.ietf.org/html/draft-dusseault-http-patch-16], a 200 OK answer will return the resource new representation, meaning that the modifications took place.

h2. 201 Created

<pre>
	The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation.
</pre>

Resources are created through the use of the <strong>POST</strong> verb and include a <strong>Location</strong> header with an URI pointing to this resource address.

Once a server answers such a request with a <strong>201 Created</strong> response, Restfulie will automatically follow the specific URI and retrieve the resource:

<pre>
	hotel = {:name => "Caelum Objects Hotel", :city => "Sao Paulo", :room_count => 3}

	hotel = Restfulie.at('http://localhost:3000/hotels').as('vnd/caelum_hotel+xml').create(hotel.to_xml(:root => "hotel"))

	puts "Response was #{hotel.web_response}"
</pre>

h2. Undesired responses

In some cases, the result is not exactly what we were desired, a successful 200~299 response code, and our code needs to act accordingly. It is a bad practice to act as if every request execution was a successful one. In the human web, we are constantly checking whether there was any error prior to following a process or browsing further.

The same applies to our client software: it should check whether the response was successful prior to going further and this can be easily achieved by accessing the response code.

<pre>
	hotel = Restfulie.at('http://localhost:30000/hotels/1').get
	raise "unable to delete resource" unless hotel.destroy.web_response.code == "200"
	puts "Hotel #{hotel.name} was deleted"
</pre>

Based on the example above, the object returned by invoking <strong>web_response</strong> provides a method returning the response code, but a <strong>DELETE</strong> operation can also answer with '202 Accepted' and '204 No Content'.

In order to handle all those successful cases (2xx), one can invoke the <strong>is_successful?</strong> method:

<pre>
	hotel = Restfulie.at('http://localhost:30000/hotels/1').get
	raise "unable to delete resource" unless hotel.destroy.web_response.is_successful?
	puts "Hotel #{hotel.name} was deleted"
</pre>

h3. Other results

There is one method available for each group of results defined in the HTTP specification and you can use them to program your client behavior accordingly to your server response.

<ul>
	<li>100~199: is_informational?</li>
	<li>200~299: is_successful?</li>
	<li>300~399: is_redirection?</li>
	<li>400~499: is_client_error?</li>
	<li>500~599: is_server_error?</li>
</ul>

A typical client application will only check for successful results: if the request was unsuccessful, execute some specific control behavior. Redirection and informational responses are handled directly by Restfulie when possible.

For example, a <b>301</b> response from a <b>GET</b> request will be automatically followed but due to the HTTP specification, when executing a <b>POST</b> response it will not follow such response. It can be configured through Restfulie's API, though:

<blockquote>TODO example on how to follow 301</blockquote>

h2. The response and it's headers

Restfulie provides easy access to the response object and it's header through the <b>web_response</b> and <b>web_response[header_name]</b>:

<pre>
hotel = Restfulie.at('http://localhost:30000/hotels/1').get
puts "The response code was #{hotel.web_response.code}"
puts "The response content type was #{hotel.web_response['Content-type']}"
</pre>

h2. Custom behavior on undesired responses

<blockquote>TODO implement custom exceptions on specific response codes</blockquote>
