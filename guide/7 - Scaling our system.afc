[section  Caches]

Because our system is stateless, we can scale it by caching copies of our resource representation in layers staying between the client and the server, typical proxies that are shared by multiple users, and the client tier itself, and finally, local copies stored in a local cache.

In the human web cache is controlled through HTTP cache headers [reference to http specification, cache headers], and resource representation copies are stored both in remote proxies and the local browser.

[note]TODO image here[/note]

The amazing power that HTTP gives us when making correctly use of such headers is leveraged due to possibility of inserting remote shared caches (proxies) anywhere, as just prior to entering a company's internal network:

[note]TODO image here[/note]

Another technique is to add a cache layer for all application clients within the server tier, so every one of them benefit from requests made previously.

[note]TODO image here[/note]

All those options are available because the HTTP protocol allows the inclusion of new intermediate layers without any knowledge of the clients and already provides cache control capabilities in its own protocol, as the Roy's REST architecture description explains.

Both local cache support on clients and conditional request support on the client and server are an important point for any REST api, without them, clients will perceive longer response times and servers are able to cope with fewer clients.

[section  Restfulie local cache]

The simplest cache support that can be implemented in HTTP client libraries is related to cache headers given by servers, specific hints that allows the client to keep a cached representation as the up-to-date revision.

The XXXX header notifies the client that until this expiration time, there is no need to execute a request at all: the current representation can be considered the up-to-date one.

[note]TODO image without the request[/note]

The first request retrieves the resources:

<pre>GET http://localhost:3000/hotels HTTP/1.1[/ruby]

And the server response includes the cache-control header:

<pre>HTTP/1.1 200 OK
Connection: close
Date: Sun, 17 Jan 2010 23:47:32 GMT
Cache-Control: private, s-maxage=0, max-age=0, must-revalidate
Content-Type: application/atom+xml; charset=utf-8

<hotel>
	<name>Caelum Objects</hotel>
	<room_count>10</room_count>
</hotel>
[/ruby]

Local cache is supported by default by Restfulie, without any extra effort from the client developer.

[section  Conditional getting]

Restfulie allows the use of conditional resource retrieval through the use of **Etag** and **Last-modified** headers. Once a resource is retrieved, it keeps within its object both reponse values, so it can use them to retrieve the resource again, when required.

Restfulie will use those headers by default if any **self** relation is invoked as a method, therefore if the server implements an **Etag** or **Last-modified** header, the following code would receive a 200 and 304 response in the first and second GET requests, repectively:

[ruby]hotels = Restfulie.at('http://localhost:3000/hotels').get
hotels = hotels.self
[/ruby]

In order to make it work properly, the server needs to implement the resource rendering process correctly with the two mentioned headers. Fortunately, Restfulie's **render_collection** method automatically does that for us, therefore our hotels list rendering process already returns a 304 response:

<pre>render_collection @hotels do |item|
  item.to_xml :controller => self, :only => [:name, :room_count], :skip_instruct => true
end
[/ruby]

In the client, the self invocation will use both the received **Etag** and **Last-modified** headers:

[ruby]hotels = Restfulie.at('http://localhost:3000/hotels').get
[/ruby]

[title  Last-modified]

The 'Last-modified' header dictates when the resource was last modified, and this information can be sent back to the server when executing the same request with an extra 'If-Unmodified-Since' header that can be responded with a "304 Not Modified" meaning, again, that the client can stick to the previous response. This will not save on latency but will help with bandwidth consumption and CPU time.


The first request retrieves the resources:

<pre>GET http://localhost:3000/hotels/94 HTTP/1.1[/ruby]

And the server response includes the **Last-modified** header:

<pre>HTTP/1.1 200 OK
Connection: close
Date: Sun, 17 Jan 2010 23:47:32 GMT
Cache-Control: private, s-maxage=0, max-age=0, must-revalidate
Content-Type: application/vnd.hotel+xml; charset=utf-8
Last-Modified: Sat, 16 Jan 2010 23:22:10 GMT

<hotel>
	<name>Caelum Objects</hotel>
	<room_count>10</room_count>
</hotel>
[/ruby]

After the cache policy expires, Restfulie uses the If-Unmodified-Since to request whether the resource changed:

<pre>GET http://localhost:3000/hotels/94 HTTP/1.1
If-Unmodified-Since: Sat, 16 Jan 2010 23:22:10 GMT[/ruby]

With a resulting 304:

<pre>HTTP/1.1 304 Not Modified
Connection: close
Date: Sun, 17 Jan 2010 23:56:24 GMT
Last-Modified: Sat, 16 Jan 2010 23:22:10 GMT
Cache-Control: private, max-age=0, must-revalidate
[/ruby]

[note]TODO diagram on Last-modified[/note]

An 'ETag' header on the response gives a identification that works in the same way that 'Last-modified' does, sending a 'If-None-Match' header in the request and receing a "304 Not Modified" response.

The first request retrieves the resources:

<pre>GET http://localhost:3000/hotels/94 HTTP/1.1[/ruby]

And the server response includes the etag:

<pre>HTTP/1.1 200 OK
Connection: close
Date: Sun, 17 Jan 2010 23:47:32 GMT
Cache-Control: private, s-maxage=0, max-age=0, must-revalidate
Content-Type: application/vnd.hotel+xml; charset=utf-8
ETag: "d21f1963230d1b690fc6e60912e8eae8"

<hotel>
	<name>Caelum Objects</hotel>
	<room_count>10</room_count>
</hotel>
[/ruby]

After the cache policy expires, Restfulie uses the ETag to request whether the resource changed:

<pre>GET http://localhost:3000/hotels/94 HTTP/1.1
If-None-Match: "d21f1963230d1b690fc6e60912e8eae8"[/ruby]

With a resulting 304:

<pre>HTTP/1.1 304 Not Modified
Connection: close
Date: Sun, 17 Jan 2010 23:56:24 GMT
ETag: "202c390e89d3212913225901df92955c"
Cache-Control: private, max-age=0, must-revalidate
[/ruby]

[note]TODO diagram on ETag[/note]

[title  Importance]

Conditional resource retrieval is of the most importance in highly scalable systems based on REST architectures: its result allows same latency but lower bandwidth consumption, therefore a faster response is available.

Once multiple users share the same intermediate layers, as a proxy, all benefit from one's single cached response containing a "shareable" resource representation.

[note]TODO image with many clients executing request[/note]

[section  Benchmarking our system]

Now that we know how Restfulie will benefit from local caches, http headers and shared caches, we can measure the benefits of adopting such a solution.

First of all, let's write a typical user behavior that will run against our server. The user will retrieve the entire list of hotels and pick the cheapest one, trying to book it:

[ruby]	hotels = Restfulie.at('http://localhost:3000/hotels').get
	find_and_book_cheaper hotels
[/ruby]

If the cheaper hotel has no room available, the client looks down for the next cheapest hotel, and tries to book it again:

[ruby]	def find_and_book_cheaper(hotels)
		cheaper = find_cheaper(hotels)
		hotels.remove cheaper
		return find_and_book_cheaper(hotels) if cheaper.available_rooms == 0
	end
[/ruby]

Another problem that might arrive is that there is actually no hotels with available rooms, so every the client will give up booking it:

[ruby]	def find_and_book_cheaper(hotels)
		return nil if hotels.length == 0
		cheaper = find_cheaper(hotels)
		hotels.remove cheaper
		return find_and_book_cheaper(hotels) if cheaper.available_rooms == 0
	end
[/ruby]

Now its time to book the hotel by creating a booking and pay it:

[ruby]	booking = cheaper.self.book(:days => 10)
	payment = booking.pay(:amount => booking.cost)
[/ruby]

But the payment process might fail because other clients might have paid for the last available rooms through another website, therefore we need to check whether the response was successful and try to book the following cheaper one if it was not:

[ruby]	booking = cheaper.self.book(:days => 10)
	receipt = booking.pay(:amount => booking.cost)
	return find_and_book_cheaper(hotels) unless receipt.is_successful?
	puts "Successfully booked hotel #{hotel.name}"
[/ruby]

The entire source code for booking a hotel is available here, with a slightly modified version that counts the number of bookings it has tried:

[ruby]	def find_and_book_cheaper(hotels, attempts = 1)
		return nil if hotels.length == 0
		cheaper = find_cheaper(hotels)
		hotels.remove cheaper
		return find_and_book_cheaper(hotels, attempts + 1) if cheaper.available_rooms == 0
		booking = cheaper.self.book(:days => 10)
		receipt = booking.pay(:amount => booking.cost)
		return find_and_book_cheaper(hotels, attempts + 1) unless receipt.is_successful?
		puts "Successfully booked hotel #{hotel.name}, attempt number #{attempts}"
	end

	hotels = Restfulie.at('http://localhost:3000/hotels').get
	find_and_book_cheaper hotels
[/ruby]

The above process consists of one initial GET request that retrieves the list of hotels, one extra GET request for each hotel that we shall attempt booking - in order to retrieve all information related to it, and two POST requests for each booking attempt.

A client that successfully books his first attempted hotel will execute a total of 4 http requests, while a client that only succeeds on his **n**th attempt will execute (1 + 2*n) http requests.

When a similar number of booking attempts is executed, we can benchmark our application by measuring either amount of cpu process used on all clients + amount of cpu process used on the server, the amount of bandwidth sent and received through all requests or the total amount of time it took between the first client started requesting and the last one finished it process.

[note]TODO add one more step that local cache will help[/note]

[section  Benchmarking after turning off local cache and 304]

The easiest way to turn off support to local cache and 304 for all requests and responses in Restfulie is to change the functions related to such behavior:

[ruby]	TODO code that opens both modules and turn off such support
[/ruby]

CPU:

Bandwidth:

Total time:

[section  Benchmarking with local cache]

Now we are ready to run the same test but with support to local caches:

[ruby]	TODO code that opens one module and turn off 304
[/ruby]

CPU:

Bandwidth:

Total time:

[section  Benchmarking with a reverse proxy]

And without any modification to Restfulie's sourcecode, we make full use of local cache and 304 responses:

CPU:

Bandwidth:

Total time:

[section  Benchmarking with a reverse cache]

Optimizing our system even further, we can add a reverse proxy that will parse every request prior to delegating to the server, caching responses whenever possible. Further requests that matches previously cached ones will not even be sent to the server, avoiding CPU processing, but still consuming bandwidth:

[note]TODO image[/note]

CPU:

Bandwidth:

Total time:

[section  Benchmarking with a load balancer]

CPU:

Bandwidth:

Total time:

[section  Summing up]

Using what the entire http stack provides us, our system has scaled from answering clients within XXXXXXXXXXXXXXX.

According to CPU usage, there was a X% increase, and at last, a bandwidth economy of XXXX.

As we have seen in this chapter, using these resources involves no extra costs or software acquisition, and at the same delivers an increase of YYY% to XXX% according to this usage scenario. Restfulie support to cache related headers comes with no effort to the end user, while load balancers and reverse proxies are easy to find and configure.

[section  Distributed content]

[title  Benchmarking distributed content]

In a connected web, it is quite common to find applications that relate to other ones on the net. A system that syndicates content from other hotels might delegate the ordering process to such systems, by providing specific URIs when executing the hotel resource retrieval.

One example of such services is Kayak, which allows users to search for hotels and presents them in a single list, but the booking process itself takes place in differente providers. Kayak plays hist part as a data aggregator, only guiding its clients to other systems which provide the desired features.

Because these systems provide an uniform interface for the booking process (pick the hotel, dates, book, pay) with standard information, an human can easily proceed with its intended goal in mind.

Restfulie allows systems to work in the same way by linking to existing resources in other systems. When other systems already exist, one can link to them by defining self relationships on items. For example:

[ruby]class Hotel

	acts_as_restfulie do |hotel, t|
		t.self.at('http://caelumobjects/hotels/2')
	end

end
[/ruby]

[note]TODO implement such feature[/note]

We can simulate two booking systems and such an aggregating one (as Kayak) by running three different instances of our hotels system. The first two, systems A and B, are responsible for some specific hotels, while system C controls all queries.

[note]TODO image[/note]

[title  Creating the aggregating system]

Our aggregating system is really simple, containing Hotels that can be registered with a name, room count and URI:

<pre>script/generate scaffold hotel name:string uri:string room_count:int[/ruby]

And we create a relation to the original resource content: the system providing the features that allows clients book hotels:

[ruby]class Hotel

	acts_as_restfulie do |hotel, t|
		t.self.at(hotel.uri)
	end

end
[/ruby]

CPU:

Bandwidth:

Total time:

[title  Benchmarking systems exposing published content]

The final option that we will show in this book is to create systems with custom feeds that provide information on their own hotels.

[note]TODO image with every client's feed[/note]

Those client systems support a publisher-subscriber protocol called **pubsubhubbub** that notifies the aggregation system every time a new hotel is added.

In this case, our aggregation system will the cache hotel's name, room count and URI and use the provided information when users execute their searches. Later when the resource representation expires, any further usage of such hotel requires a new request to the original resource URI, as the diagram shows.

[note]TODO image on resource representation expire[/note]

<pre>script/generate scaffold hotel name:string uri:string room_count:id expiry_date:datetime[/ruby]

[note]TODO support pubsubhubbub[/note]

[section  Polling systems]
