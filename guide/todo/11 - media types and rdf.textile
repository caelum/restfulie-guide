Story Henry example:


> In brief: Define resources in terms of standard media types and link
> relations, saving URI allocation and method selection for the
> implementation phase.

Nearly right, but I would de-emphasise media types, until the last moment.

Here is how to go about it.

1. Take a problem the is not client server specific. Ie: try something that spans domains, that requires distributed cooperation among agents. eg: Social Networks. Think big, and built simple.

2. define your models using RDF. Take an example on foaf:

http://xmlns.com/foaf/0.1/

(and publish those models as linked data, so we have recursion)

3. Create Linked Data using those models.
Build linked data examples that span across domains. Ie. one resource is defined on my site, the other on yours and link between them. FOAF is a good example of this.

see for example how the data in this file points to data others have on their web site

curl http://bblfish.net/people/henry/card

You can choose one or more media types to do this, with content negotiation. Ie: the same URL can return any number of representations: html, rdf/xml, n3, ...

4. Create browsers of linked data

eg, the foaf address book
https://sommer.dev.java.net/AddressBook.html
or web versions of the same
http://foaf-visualizer.org/

5. Add security restfully

eg, foaf+ssl
http://esw.w3.org/topic/foaf+ssl

6. Now you can do shopping, in a RESTful manner using the GoodRelations ontology for example
http://purl.org/goodrelations/
You probably just need to define certain types of resources, as being ShoppingCarts, and actions that one needs to do on those to make it possible for people to create buying agents.