[chapter  Booking your trip]

[section Booking]

It is time to move to implement the process through which an user is capable of booking the entire trip package. We will start by allowing users to search for, book and finally pay a flight, later evolving our system to allow hotel bookings in the same process as well.




















[section  Searching for a flight]

The first step is to search for a flight and we shall use the generated search engine to browse through the ones from Sao Paulo to Miami.

[ruby]
flights = Restfulie.at('http://localhost:3000/flights').search(from => 'Sao Paulo', to => 'Miami')
flights.each do |f|
	puts "Flight departing at #{f.departure} for $#{f.price}"
end
[/ruby]

We could either setup the search engine to allow sorting by price or implement a ruby function to search for it, if our server does not support it:

[ruby]
def cheaper(flights)
	flights.accumulate(nil) do |flight, acc|
		(acc.nil? || acc.price>flight.price) ? flight : acc
	end
end

flight = cheaper(flights)
[/ruby]

[note]
Implement server side example on flight sorting by price
[/note]

[section  Booking]

With the desired flight in the "user hands", he is capable of browsing through the booking process by creating a new trip and adding such flight to the list of flights within the trip resource.

First of all, let's create the trip class, which will be mapped to a trip resource within the web.

[ruby]script/generate scaffold trip
script/generate migration add_trip_relations
[/ruby]

[ruby]
TOLINK add fields for trip to flights and trip to hotels
[/ruby]

Rails automatically takes care of etag and last_modified values when a resource change its relationships:

<blockquote>TOLINK test it!</blockquote>

[ruby]script/console
flight = Flight.new.save
flight.save

trip = Trip.new
trip.flights << flight
trip.save

puts trip.etag
puts trip.updated_at

trip.flights.clear

puts trip.etag
puts trip.updated_at
[/ruby]

Outputs

[ruby]	TOLINK add output
[/ruby]

Because our resource and its representation is not taken into account to Rails ActiveRecord, but seen only as a record, it will not update etag and updated_at values when updating its relationships that are made available through the resource representation, try retrieving and updating a child element, retrieving the trip's updated_at and etag values prior and after update:

[ruby]script/console
flight = Flight.new.save
flight.save

trip = Trip.new
trip.flights << flight
trip.save

puts trip.etag
puts trip.updated_at

flight.TODO = "another value"
flight.save

puts trip.etag
puts trip.updated_at
[/ruby]

Outputs

[ruby]	TODO add output
[/ruby]

Therefore, its our job to implement etag and updated_at methods that change according to our resource representation:

[ruby]def etag
	[self, flights]
end

def updated_at
	min(updated_at, min(flights).updated_at)
end
[/ruby]

And now, the same code outputs:

[ruby]	TODO add output
[/ruby]

Again, Restfulie is smart enough to understand such relations and correctly implement those methods within the Trip if we tell it to do so. In order to see it working, simply **do not** implement them, but configure Restfulie accordingly:

[ruby]class Trip

	TODO full_relation :flights

end
[/ruby]

And we get the same result:

[ruby]	TODO add output
[/ruby]

Note that this also affects the resource representation which now includes the list of flights within its content:

[ruby]	puts trip.to_atom(:controller => Restfulie::Server::MockedController)
[/ruby]

[ruby]TODO atom representation of a trip, including the first flight
[/ruby]

Or in typical xml:

[ruby]	puts trip.to_xml(:controller => Restfulie::Server::MockedController)
[/ruby]

[ruby]TODO xml representation of a trip, including the first flight
[/ruby]

A trip is actually a feed which allows flights to be added to it, therefore we shall add the link understood by clients as a way to add resources to this current collection:

[ruby]class Trip
	acts_as_restfulie do |trip, t|
		t.add.at :action => :add
	end
end
[/ruby]

As usually, Restfulie assumes that the action name is the relation name and therefore there is no need for the hash argument:

[ruby]	class Trip
		acts_as_restfulie do |trip, t|
			t.add.at :action => :add
		end
	end
[/ruby]

We define an add method in the controller, which loads the desired trip and adds the flight sent through the request body as its content to the trip.

[ruby]class 
	def add
		trip = load_trip
		trip.add read_from_request(Flight)
	end
end
[/ruby]

And allow PATCHing the current trip:

[ruby]def partial_update(part)
end
[/ruby]

<blockquote>In a real booking system, a more complex approach would have driven the trip creation process, where one could choose his seat and much more options than just the ones showed in our system. But such features are either easily inserted within the software or other parts of the book should be enough to understand how to implement it.</blockquote>

[section  Paying]

Now its time to take our trip and pay for it, and thinking about resources and relations a payment can be accessed through a relationship between the trip and itself. After the trip is payed, it should automatically generate a payment resource, and return its location: the typical behavior from Restfulie's controller.

[ruby][/ruby]

Payments should not be updated or removed, therefore you should only include the create and show methods. Because Restfulie uses Inherited Resources when defining its controller methods, you can use all of its settings:

[ruby]class PaymentController < TODO

	TODO only :create, :show

end
[/ruby]

Because trips might change after its payment was made, we need to copy that trip and we might call it a booking.
And create our booking class based on a trip:

[ruby]class Booking < ActiveRecord::Base
	has_many :flights
	belongs_to :payment
	def initialize(payment, trip)
		flights = trip.flights.dup
		payment = payment
	end
end
[/ruby]

Now that we have the Booking record, we still need to create the default behavior for showing this resource to clients:

[ruby]class BookingController < TODO
	TODO only :show
end
[/ruby]

And finally change the default create behavior of our payment controller:

[ruby]	def create
		trip = TODO
		payment = TODO
		booking = payment.build_booking(payment, trip)
		booking.save
	end
[/ruby]

In order to browse from a payment to a booking resource and vice-versa, we add relational links to each other:

<pre>class Booking < ActiveRecord::Base
	acts_as_restfulie do |booking, t|
		t.relates_to.payment
		t.relates_to.flights
	end
end
class Payment < ActiveRecord::Base
	acts_as_restfulie do |payment, t|
		t.relates_to.booking
	end
end
[/ruby]

We can see the entire process working with a client:

[ruby]trip = Restfulie.at('http://localhost:3000/trips').create
flights = trip.flights
flights.add cheaper(flights.search('Sao Paulo', 'Miami')[0])
trip.payment.add()
[/ruby]

[note]
TODO pergunta pro jim, payment.add e o recurso ja existia ou pay(coisa)
[/note]

One might argue that our system now contains two different entry points: one for creating hotels and another one for trips.

[section  Sharing trips]

Notice that a trip is not related to its creator and might not be payed at all, meaning that it can be shared amongst many friends that wish to book the same trip by simply passing the trip resource URI - which is unknown to the client during development - around.

This is the power of addressability, given in this case due to the good usage of the GET http verb: specifying that resource representations can be accessed through GETting its URI.

[section  Removing unpaid trips]

Unpaid trips could be removed from the database after a long period of inactivity. It's a typical behavior for big systems to allow registered users to have their "booked information" saved for an undetermined period of time, with booking subject to availability at the moment of payment.

Other smaller systems or even those which allow non-registered users to create such resources might choose to erase these data completely from the database after an specific amount of time. This can be implemented by using Rails and XXXX features:

<blockquote>TODO CODE on creating a "quartz" that removes trips 2 years old</blockquote>

Note that in a web where user contributed content is more present every day, such process might erase precious information for others. Yahoo Travel with its trips feature allow users to share trips as described, although not providing the booking mechanism so easily for its users at the time this book was written.
[section  Browsing through hotels]

[section  Searching for another flight]

[section  Connecting to a final hotel]

[section  Linked data and information held in other systems]

[section  A full booking example]

