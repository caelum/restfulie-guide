h1. An overview of your proposed book.

Based on Jim Webber, Savas Parastatidis and Ian Ronbinson's upcoming book, which focuses on describing the characteristics and options for REST solutions, "Quit pretending: Practical REST with Restfulie" follows "Agile Web Development With Ruby on Rails", teaching the reader how to implement the most required or discussed features of web application integration using all REST constraints.

While some frameworks and books have missed the hypermedia constraint so far, this book will show how it solves questions that were so far only discussed as REST "transactions" or 2-phase commit solutions, and other solutions for typical problems which benefit from every REST characteristic as content-negotiation, loose coupling and higher levels of scalability.

Hypermedia was much talked lately due to Atom strength but there is no book so far which leverages its usage in every way mentioned by Roy Fielding - the creator of REST.

Those who have read other Rest related book will find this extra level of information related to hypermedia and how it helps on everything they read so far in practice.
Others who are used to web services using SOAP and WS-stacks will see a different implementation the benefits that REST promissed in Roy's thesis.

Finally, those looking for a new architectural style and willing to read a more hands-on material, will have a chance to jump straight into a system which follows the REST architectural style.

There is no book so far showing the power of hypermedia, no book has shown its advantages in practice, turning out to be an opportunity to create what could become a reference on how to implement REST systems and see its advantages.

Following 'Agile Web Development With Ruby on Rails' path, the book will be divided in 4 parts, including a "first show the problem, then the solution" method. The problem is first explained and then the code that solves it is shown and explained. 

The problem description looks like guidelines to let the reader understand exactly what we want to achieve.

h2. 1. Why REST

A short introduction on what are REST benefits and what we want to achieve so we can get our readers interested in the upcoming material

h2. 2. Getting started

h3. 2.1 - Configuring the rails server

Will guide the reader while installing rails, creating a blank project and configuring it with Restfulie

h3. 2.2 - Configuring the ruby client

Will guide the reader on how to create a ruby application using Restfulie's gem on the client side.

h2. 3. Building an application

h3. 3.1 - The travel agency system

Describes what our application will have to achieve by the end of the third section. There is a set of features to be implemented through out the book.

h3. 3.2 - Basic operations with Hotels

This chapter describes how to create CRUD operations with a resource.

h3. 3.3 - Handling responses

Will show how to handle the typical responses that servers might respond, and which decisions can be taken for each one of them.

h3. 3.4 - Searching

Shows how hypermedia leverages searches in our application in the same way current web applications have implemented such features.

h3. 3.5 - Tests

This chapter might either fit here or at the end of the book - with the appendices - showing how to create tests and a (possibly) a mocking system for integrated solutions using REST.

h3. 3.6 - Booking your trip

Explains how to create a booking system for both hotels and flights in a multiple request process. This allows booking cancelation if one of the expected resources state has changed i.e. a hotel became full while you were booking it.

h3. 3.7 - Transactions

This is a short chapter only to remind the readers that transactions are usually not semantically connected to our systems therefore the booking process described on the previous chapter is exactly the transaction pattern we were looking to execute.

h3. 3.8 - Evolution: booking houses

One of the main issues on long-term software maintenance is that servers evolve in order to provide extra information and features to new clients. In strong coupled systems this is difficult to achieve: new information and features will be added to the server and all client code will continue working.

h3. 3.9 - Scaling our system

Although not yet sure whether this chapter is a good idea, system performance would be measured with the existing code base and cache proxies inserted between the server and several clients. After that, performance is measured again and compared with the previous information. This chapter will show the user how information retrieval systems benefit in scalability and performance by following the REST architectural style.

h3. 3.10 - Security

This chapter will describe how to authenticate a client using tokens and how to protect part of the system.

h2. 4. Restfulie

This section presents part of the API.

h3. 4.1. - Actions and Resources

Our mind is used to think of invocations and this chapter provides simple guide lines on how to translate this kind of thought into  semantically meaningful resources.

h3. 4.2 - Client side

A big part of this API has already been shown and explained in previous chapters, this one will comment on functionalities not shown previously.

h3. 4.3 - Media-types

API examples on how different media types could be supported within the application.

h3. 4.4 - Related resources

Presents other alternatives to connect resources. This chapter is connected with the previous one as relation between resources are described through hyperlinks according to different media-types.

h2. 5. Appendices

h3. 5.1 - Source code

The entire source code for the final application

h3. 5.2 - Test

The test chapter from section 3 might be included here.

h2. Competing Books

There were a few books commented earlier, and there is an upcoming book from Subbu, called RESTful Web Services Cookbook. It contains a series of recipes with positive and negative points on each solution and seems to complement Jim's current book and our Practical REST book: Subbu's book is focused on positive and negative points, but not on the implementation itself. Our book guides the reader through an entire application, while his go through code samples.

Leonard Richardson and Sam Ruby's RESTful Web Services contains a short description on web services, REST, his definition of Rest Oriented Architecture (ROA) and an example application using it. Unfortunately their sample application relates to a google map alike application with not so many easy comparisons with software that every other reader will write in their every day life. They did make a huge step forward but still a little bit missing on the Hypermedia part (as Roy Fielding later commented at Sam's blog).

There is Bill Burke's upcoming book - I don't know which publisher - which will focus on RestEasy and JBoss REST-* idea. The idea was highly criticized by the community. RESTEasy is based on JAX-RS specification and - according to the authors - they did not do a good job on the Hypermedia part. Therefore, although Bill's book might have a similar approach to ours in a near future, it will surely have to face the lack of default hypermedia support on JAX-RS and RESTEasy's client API. As a last note, we still do not know if his book will be "implement an entire application" approach or an API reference guide.

Market information

While looking for some graphics on people searching for REST information on the web, we have created a post which, based on Google Insight comparisons, shows REST being the only alternative amongst soa, ejb, corba and itself that has a higher search increase rate compared to the increase rate of programming topics in general.

This, and other graphics, can be found at http://guilhermesilveira.wordpress.com/2009/12/21/when-should-i-start-a-rest-initiative/ and show how rest related material is being needed more and more.

Software developers and architects are the main audience: while architects will benefit from understand REST advantages in practice, developers are able to copy ideas straight into their projects.

h2. Promotional Ideas


Jim Webber, together with Ian Robinson, is a well known Thoughtworker which has a lot of influence on infoq and thoughtwork fans.

Savas, who has written the book with them, is well known at Microsoft and highly influencial in the same area.

Guilherme Silveira runs the brazilian largest java community (guj.com.br) with 2 million page views a month, infoq brazil, and is responsible for Caelum's training's material. Caelum is a (2009) 60 employee company in Brazil focused on Development and Agile training and will adopt the book as the main material for its REST training. Caelum had 4000 students last year and therefore its reach with the Brazilian development community and its students is quite strong.
There is one of the closest Caelum's client, Locaweb, the biggest hosting company in Brazil, which is already using and contributing to Restfulie, and Grupo Abril, one the biggest media companies in Brazil, where the architects have chosen to use Restfulie internally. Both companies might provide success stories that can boost the book sales by helping reviewing and therefore referencing it.
At the same time, Restfulie will use the book as its how-to guide.

h2. Bio

Guilherme Silveira is the Lead Architect for Caelum, taking part on architectural decisions with clients. He is also responsible for Caelum's training content related to architectural aspects and agile practices. Guilherme has contributed with open source projects, created Restfulie for Java and for Ruby, VRaptor and commited to XStream.

Dr. Jim Webber is the Global Head of Architecture for ThoughtWorks where he works with clients on delivering dependable service-oriented systems. Jim was formerly a senior researcher with the UK E-Science programme where he developed strategies for aligning Grid computing with Web Services practices and architectural patterns for dependable Service-Oriented computing. Jim has extensive Web Services architecture and development experience as an architect with Arjuna Technologies and was the lead developer with Hewlett-Packard on the industry's first Web Services Transaction solution.
Jim is an active speaker in the Web Services space and is co-author of the book "Developing Enterprise Web Services - An Architect's Guide" in addition to being a contributing author to other books and articles.
Jim holds a B.Sc. in Computing Science and Ph.D. in Parallel Computing both from the University of Newcastle upon Tyne.
20 page writing sample

Note on the content: links are references to be added as footnotes
